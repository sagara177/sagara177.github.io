{"name":"Heat VM HAのバグ修正","tagline":"","body":"### はじめに\r\n\r\nAdvent Calendarに勢いで飛びついてしまって「何か役立ちそうなことを書こう」と案を練っているうちに12/11を迎えてしまいました。\r\n結局そんな特別なものは用意できませんでした。すいません。。。\r\n「Heat関係」と予告しておいたので、Heatで今年個人的に一番面白かった作業を書こうと思います。\r\n\r\nHeatの機能でVM HAという機能があります。\r\nざっくり説明すると、サービスやVMが異常状態の場合にVMを削除して起動し直してくれる機能です。\r\n\r\nこの機能、Icehouseのリリース当初は、とあるバグが影響して動かなかったのではと思います。\r\n（もしくはリリース当初は動いていたけれど、以降のバージョンアップでデグレしてしまったとか。\r\n周辺コードをgit blame/git logしても、そういう形跡は見あたらなかったのですが。。）\r\n以下VM HAの詳細と、上記のバグを修正してパッチをコミットした話です。\r\n\r\n### HeatのVM HA機能について\r\n\r\nまずはVM HAについてもう少し詳細を説明します。\r\n公式Wikiの[Heat/Using-HA](https://wiki.openstack.org/wiki/Heat/Using-HA)を見ると’Create the HA example stack’に2つ例が紹介されています。\r\n\r\n* HA（サービス監視）\r\n  * VM内でサービス監視を行い異常の場合、通知を送る（異常通知）\r\n    * /etc/cfn/hooks.confでサービス再起動時にnotify-on-httpd-restartedを実行\r\n    * notify-on-httpd-restartedで、cfn-push-stats --service-failureを実行\r\n  * 監視結果について、異常通知が一定期間に一定回数以上行われることがあるかチェック\r\n    * AWS::CloudWatch::Alarm\r\n  * 上記の場合VMを削除して新規に作成しなおす\r\n    * OS::Heat::HARestarter\r\n* IHA（VM監視）\r\n  * VM内から生存通知を送る（正常通知）\r\n    * cfn-hup-crontabで、cfn-push-stats --heartbeatを毎分実行\r\n  * 監視結果について、正常通知が一定期間に一定回数未満とならないかチェック\r\n    * AWS::CloudWatch::Alarm\r\n  * 上記の場合VMを削除して新規に作成しなおす\r\n    * OS::Heat::HARestarter\r\n\r\n上記の部分でVMから正常／異常通知を行う部分が今回のバグを修正した箇所です。\r\n\r\n### VM HA機能を動かしてみる\r\n\r\nさて、上記Wikiのテンプレートを動かしてみます。\r\n（イメージによってインスタンス内のスクリプトとかサービス起動方法とか微修正が必要です。）\r\nHAとIHAどちらでも同様の症状が発生すると思いますが、自分はIHAの方で確認していました。\r\nheat stack-createでテンプレートを起動すると仮想リソースが続々作成され、動いた！と思うのですが、数分後に管理画面を見ると、どうもVMのUUIDが変わっています。\r\nVMが定期的に削除されていることに気がつきます orz...\r\n\r\n### 問題解析 - VM\r\n\r\n削除される前のVMに乗り込みます。\r\n\r\n/var/log/messagesなどに特にVMの起動関係の異常は見当たりません。\r\n使用しているイメージの異常で起動が失敗しているわけではなさそうです。\r\nVM内からHeatに通知を送るheat-cfntools周りのログを調べると、/var/log/cfn-push-statsに403エラーが出力されていることに気づきます。\r\n\r\n```\r\nDEBUG [2014-12-10 23:09:02,410] cfn-push-stats called Namespace(cpu_util=False, credential_file='/etc/cfn/cfn-credentials', disk_path='/', disk_space_avail=False, disk_space_used=False, disk_space_util=False, disk_units='megabytes', haproxy=False, haproxy_latency=False, heartbeat=True, mem_avail=False, mem_used=False, mem_util=False, memory_units='megabytes', metric=None, service_failure=False, swap_used=False, swap_util=False, units=None, value=None, verbose=False, watch='test-HeartbeatFailureAlarm') \r\nDEBUG [2014-12-10 23:09:02,413] Using access key provided by client.\r\nDEBUG [2014-12-10 23:09:02,413] Using secret key provided by client.\r\nINFO [2014-12-10 23:09:02,414] Sending metric Heartbeat, Units Counter, Value 1\r\nDEBUG [2014-12-10 23:09:02,415] Method: POST\r\nDEBUG [2014-12-10 23:09:02,415] Path: /v1/\r\nDEBUG [2014-12-10 23:09:02,415] Data: \r\nDEBUG [2014-12-10 23:09:02,415] Headers: {}\r\nDEBUG [2014-12-10 23:09:02,416] Host: 192.168.190.4\r\nDEBUG [2014-12-10 23:09:02,417] Port: 8003\r\nDEBUG [2014-12-10 23:09:02,417] Params: {'MetricData.member.1.Dimensions.member.2.Value': 'test-HeartbeatFailureAlarm', 'MetricData.member.1.Dimensions.member.2.Name': 'AlarmName', 'Namespace': 'system/linux', 'MetricData.member.1.Unit': 'Counter', 'MetricData.member.1.Value': 1, 'Action': 'PutMetricData', 'MetricData.member.1.Dimensions.member.1.Name': 'InstanceId', 'Version': '2010-08-01', 'MetricData.member.1.Dimensions.member.1.Value': u'614680ad-1052-4c4c-9d28-970f59fa2205', 'MetricData.member.1.MetricName': 'Heartbeat'}\r\nDEBUG [2014-12-10 23:09:02,417] establishing HTTP connection: kwargs={'port': 8003, 'timeout': 70}\r\nDEBUG [2014-12-10 23:09:02,417] Token: None\r\nDEBUG [2014-12-10 23:09:02,418] CanonicalRequest:\r\nPOST\r\n/v1/\r\n\r\nhost:192.168.190.4:8003\r\nx-amz-date:20141210T140902Z\r\n\r\nhost;x-amz-date\r\n09f60093d26fc1ad29338da6af21ad82e7118b2d53919aaf674203df74c0fc8f\r\nDEBUG [2014-12-10 23:09:02,419] StringToSign:\r\nAWS4-HMAC-SHA256\r\n20141210T140902Z\r\n20141210/168/192/aws4_request\r\n52a207ed2f1a65fbab6b80a2e7c32793299c2e2b9e64e4e03587523e9ba0d4d9\r\nDEBUG [2014-12-10 23:09:02,419] Signature:\r\nf34c5f50ab202a149964ed8649f39b3df33c4eeb2174b590844b2cdd3defac33\r\nDEBUG [2014-12-10 23:09:02,457] <ErrorResponse><Error><Message>User is not authorized to perform action</Message><Code>AccessDenied</Code><Type>Sender</Type></Error></ErrorResponse>\r\nERROR [2014-12-10 23:09:02,457] 403 AccessDenied\r\nERROR [2014-12-10 23:09:02,458] <ErrorResponse><Error><Message>User is not authorized to perform action</Message><Code>AccessDenied</Code><Type>Sender</Type></Error></ErrorResponse>\r\n```\r\n\r\n？？？。403なので対向のサーバにはリクエストが届いていそうです。\r\n同じテンプレート内に記述があり、同じくVMから通信するcfn-signalは問題なく動いています。\r\nとりあえずcfn-*の送信内容をtcpdumpで回収して、対向側を調べます。\r\n\r\n### 問題解析 - 対向サーバ（Heat）\r\n\r\n先ほどのcfn-push-statsの対向側は8003番ポートを使っているheat-api-cloudwatchのサービスです。\r\nデバッグを行います。自分はサービス起動を停止し、普通のプロセスとして’環境変数 python -m pdb *.py’経由で起動することで特定の位置にブレークポイントを設定して問題を追っていきます。（Horizonとかだとimport pdb; pdb.set_trace()です。もっと効率的なやり方もあるかも。）\r\n上記の起動時の環境変数や*.pyの部分は、bash -x service openstack-heat-api-cloudwatch startというふうに、スクリプト起動時の変数など含めて調べます。（2段階実施して調べます。）\r\n毎回Heatでスタックを作成すると大変なので、今回は先ほど回収したtcpdumpの内容をもとに、curlでHTTPのダミーリクエストを飛ばせるようにしました。\r\n\r\nheat-api-cloudwatchを見ていくと、keystone-clientのライブラリを使ってEC2リクエストについて改変されていないか確認しています。\r\nその際、シグネチャー確認をしている箇所で不一致になっていて403を返していることがわかります。\r\nPOSTの際のクエリパラメータを、URLのパスにも含めシグネチャー計算するか否か、シグネチャー計算するクライアント側とサーバ側でロジックが一致していないようです。\r\n\r\n### 問題解析 - シグネチャー計算ロジックの比較\r\n\r\nheat-cfntools側のシグネチャー計算は、botoのライブラリの中で行っているようです。\r\n\r\nboto/boto/auth.py\r\n```\r\nclass HmacAuthV4Handler(AuthHandler, HmacKeys):\r\n\r\n    def canonical_query_string(self, http_request):\r\n        # POST requests pass parameters in through the\r\n        # http_request.body field.\r\n        if http_request.method == 'POST':\r\n            return \"\"\r\n        l = []\r\n        for param in sorted(http_request.params):\r\n            value = boto.utils.get_utf8_value(http_request.params[param])\r\n            l.append('%s=%s' % (urllib.parse.quote(param, safe='-_.~'),\r\n                                urllib.parse.quote(value, safe='-_.~')))\r\n        return '&'.join(l)\r\n```\r\n\r\nHeatはAWS CloudFormationをもとに作られていて一部互換性もあるので、AWS製のheat-cfntools（aws-cfn-bootstrap）にも同様のロジックがあるはずです。\r\naws-cfn-bootstrapは[Bootstrapping Applications using AWS CloudFormation](https://aws.amazon.com/developertools/AWS-CloudFormation/4026240853893296)からダウンロードできます。ライセンスもApacheなので参考にしても問題なさそうです。確認してみます。\r\n\r\ncfnbootstrap/aws_client.py\r\n```\r\nclass V4Signer(Signer):\r\n\r\n    def sign(self, verb, base_url, params, creds, in_headers=None, timestamp=None):\r\n\r\n        (canonical_headers, signed_headers) = self._canonicalize_headers(new_headers)\r\n        canonical_request += canonical_headers + '\\n' + signed_headers + '\\n'\r\n        canonical_request += hashlib.sha256(Client.construct_query(params).encode('utf-8') if verb == 'POST' else '').hexdigest()\r\n```\r\n\r\nやっぱりこっちもPOSTの場合はクエリパラメータをシグネチャー計算に含めていないです。\r\n\r\n一方、サーバー側は下のファイルです。\r\n\r\nkeystoneclient/contrib/ec2/utils.py\r\n```\r\nclass Ec2Signer(object):\r\n\r\n    def _calc_signature_4(self, params, verb, server_string, path,\r\n                          headers,\r\n                          body_hash):\r\n        \"\"\"Generate AWS signature version 4 string.\"\"\"\r\n\r\n        # Create canonical request:\r\n        # http://docs.aws.amazon.com/general/latest/gr/\r\n        # sigv4-create-canonical-request.html\r\n        # Get parameters and headers in expected string format\r\n        cr = \"\\n\".join((verb.upper(), path,\r\n                        self._canonical_qs(params),\r\n                        canonical_header_str(),\r\n                        auth_param('SignedHeaders'),\r\n                        body_hash))\r\n\r\n    @staticmethod\r\n    def _canonical_qs(params):\r\n        \"\"\"Construct a sorted, correctly encoded query string as required for                                                                         \r\n        _calc_signature_2 and _calc_signature_4.                                                                                                      \r\n        \"\"\"\r\n        keys = list(params)\r\n        keys.sort()\r\n        pairs = []\r\n        for key in keys:\r\n            val = Ec2Signer._get_utf8_value(params[key])\r\n            val = urllib.parse.quote(val, safe='-_~')\r\n            pairs.append(urllib.parse.quote(key, safe='') + '=' + val)\r\n        qs = '&'.join(pairs)\r\n        return qs\r\n```\r\n\r\nこちらはPOSTの場合に特にクエリパラメータをシグネチャー計算から除外していません。（クエリパラメータをシグネチャー計算に含めています。）\r\n\r\n### AWSの仕様調査\r\n\r\nAWSの仕様を確認してみます。\r\n[Signing AWS Requests By Using Signature Version 4](http://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html)に仕様が書かれていますが、どうもPOSTの処理について不明瞭な箇所があります。（すいません。記事執筆段階で時間がなく上記ページのどこが具体的に問題だったか再確認できませんでした。）\r\n\r\nまとめると\r\n\r\n* シグネチャー計算のロジックについて実装が一致していない\r\n* aws-cfn-bootstrap、および（heat-cfntoolsが使う）botoの場合\r\n  * POSTの場合、クエリパラメータをシグネチャー計算に含めない\r\n* keystone-clientの場合\r\n  * POSTの場合、クエリパラメータをシグネチャー計算に含める\r\n* AWSの仕様ドキュメントに不明瞭な箇所がある\r\n  * POSTの処理について記述が矛盾\r\n* cfn-push-statsはPOST処理を使用。そのため問題がおきてる。\r\n\r\nkeystone-client内のEC2互換コードがAWSの実装からずれているようなので、これを修正するのが良さそうです。\r\n\r\n### パッチ作成＆パッチ投稿\r\n\r\n修正箇所も少なく参考にできる実装もあるので、パッチ作成は簡単です。\r\nkeystone-clientの該当部分のコードの前後と合わせ、下のようなコードになりました。\r\n\r\n```\r\ndiff --git a/keystoneclient/contrib/ec2/utils.py b/keystoneclient/contrib/ec2/utils.py\r\nindex 3b722f2..899b95a 100644\r\n--- a/keystoneclient/contrib/ec2/utils.py\r\n+++ b/keystoneclient/contrib/ec2/utils.py\r\n@@ -232,12 +232,19 @@ class Ec2Signer(object):\r\n                 header_list.append('%s:%s' % (h, headers_lower[h]))\r\n             return '\\n'.join(header_list) + '\\n'\r\n \r\n+        def canonical_query_str(verb, params):\r\n+            # POST requests pass parameters in through the request body\r\n+            canonical_qs = ''\r\n+            if verb.upper() != 'POST':\r\n+                canonical_qs = self._canonical_qs(params)\r\n+            return canonical_qs\r\n+\r\n         # Create canonical request:\r\n         # http://docs.aws.amazon.com/general/latest/gr/\r\n         # sigv4-create-canonical-request.html\r\n         # Get parameters and headers in expected string format\r\n         cr = \"\\n\".join((verb.upper(), path,\r\n-                        self._canonical_qs(params),\r\n+                        canonical_query_str(verb, params),\r\n                         canonical_header_str(),\r\n                         auth_param('SignedHeaders'),\r\n                         body_hash))\r\n```\r\n\r\n動作確認したところ、確かに動きます。やった、とりあえず解決！\r\n\r\nopenstack-devのメーリングリストに報告します。（普通は問題解析する前に調査・報告するほうが良いと思います。誰かもうやっている可能性があるので。）\r\nHeatとKeystoneまたがっていて両方に報告する必要がありそうです。そのときのメールは下のような感じでした。\r\n\r\n[[openstack-dev] [Heat] [Keystone] Heat cfn-push-stats failed with '403 SignatureDoesNotMatch', it may be Keystone problem.](http://lists.openstack.org/pipermail/openstack-dev/2014-August/043900.html)\r\n\r\nその後launchpadに起票して、Gerritにパッチ投稿します。\r\n\r\n* [Bug #1360892 “EC2 v4 signature calculation is wrong, in case of ...”](https://bugs.launchpad.net/python-keystoneclient/+bug/1360892)\r\n* [Change Iad4e3921: fix EC2 Signature Version 4 calculation, in the case of POST](https://review.openstack.org/#/c/116523/)\r\n\r\nちなみに自分はCentOS + RDOというあまり開発向けでない環境で動かしているため、masterとの差分が存在する可能性があります。\r\n今回パッチ部分についてgit logなどで更新がないか確認してからGerritに投稿しました。\r\n\r\nまた上記のパッチだけだとパッチ適用有無に限らずユニットテストを通ってしまいます。\r\nなので、パッチ適用していない場合にユニットテストを通らなくなるテストコードも追加し、今後デグレが発生しないようにしておきました。\r\n\r\n投稿してCIを通過したのを確認してからIRQでレビュー依頼をしてみます。\r\nが、feature freezeも近づいておりレビュアーの方が忙しいのか、なかなかレビューが進みません。\r\n2週間くらい反応がなく、再度IRQでレビュー依頼をしたところ、Morgan Fainbergさんが対応してくれました。\r\nが、どうも今回の部分はあまり詳しくなくて自分では判断できないとのこと。\r\nそこを見ている人に連絡してくれるということだったので、しょうがなくまた置いておくことになりました。\r\nVM HAってわりと興味がある人がいると思うので、動かないままJunoがリリースされてしまうのは嫌だなー、と思い見ていると、feature freeze直前で+2レビューされて、なんとか無事マージされたようです。\r\n\r\n### 環境\r\n\r\nもし上の現象を実際に試してみたいという方がいれば（いないでしょうけど）、Icehouseリリースで試してみてください。\r\n自分の環境はCentOS 6 + RDOで、パッケージのバージョンは下記で試しています。\r\n\r\n* クライアント側\r\n  * cloud-init-0.7.4-2.el6.noarch\r\n  * heat-cfntools-1.2.6-2.el6.noarch\r\n  * python-boto-2.27.0-1.el6.noarch\r\n\r\n* サーバ側\r\n  * python-keystoneclient-0.9.0-1.el6.noarch\r\n  * python-keystone-2014.1.1-1.el6.noarch\r\n  * openstack-keystone-2014.1.1-1.el6.noarch\r\n\r\n### おわりに\r\n\r\n冒頭Heatの話と言っておきながら、終着点はkeystone-clientでした。\r\nJunoの開発後半でマージされているので、Junoでは問題なくVM HAは動作しているはずです。\r\n\r\n今年の自分の印象に残った作業はこんな感じです。\r\n来年は、もっと多くのパッチを書いたり新機能の確認など行えたら良いなと思っています。\r\n特にTokyo Summitもありますしね。どんどん盛り上がっていきたいです。\r\n\r\n### 免責\r\n\r\n上記記事の内容は過去の作業を思い出しながら書いているので、部分的に間違った内容を含んでいる可能性があります。ご了承ください。","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}